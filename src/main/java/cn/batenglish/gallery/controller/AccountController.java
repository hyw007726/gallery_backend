package cn.batenglish.gallery.controller;

import cn.batenglish.gallery.entity.User;
import cn.batenglish.gallery.repository.UserRepository;
import cn.batenglish.gallery.service.EmailService;
import cn.batenglish.gallery.service.UploadService;
import cn.batenglish.gallery.service.UserService;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.File;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;



@RestController
@RequestMapping(path="/api")
@CrossOrigin
public class AccountController {
 // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;
    private final UploadService uploadService;
    private final EmailService emailService;
    @Autowired
    public AccountController(EmailService emailService, UserService userService, UploadService uploadService,UserRepository userRepository) {
        this.emailService = emailService;
        this.uploadService = uploadService;
        this.userRepository=userRepository;
    }
    @GetMapping("handleOAuthEmail")
    public ResponseEntity<Object> handleOAuthEmail(@NotBlank @RequestHeader("Authorization") String email, @RequestParam(value = "nickname") String nickname, @RequestParam(value ="avatar") String avatar) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if(optionalUser.isPresent()){
            User user= optionalUser.get();
            if(user.getAvatarPath() == null || user.getAvatarPath().equals("")){
                user.setAvatarPath(avatar);
                userRepository.save(user);
            }
            if(user.getNickname() == null || user.getNickname().equals("")){
                user.setNickname(nickname);
                userRepository.save(user);
            }

            return ResponseEntity.status(HttpStatus.OK).body(user);
        }else{
            User tmpUser = new User();
            tmpUser.setNickname(nickname);
            tmpUser.setAvatarPath(avatar);
            tmpUser.setEmail(email);
            String pw = UUID.randomUUID().toString().substring(0,8);
            tmpUser.setPassword(pw);
            userRepository.save(tmpUser);
            emailService.sendEmail(email,"Gallery user code","Thank you for using Gallery. You have signed up with a third-party account. Please use this password for account retrieval: "+pw);
            return ResponseEntity.status(HttpStatus.OK).body(tmpUser);
        }
    }
    @GetMapping("/getProfile")
    public ResponseEntity<User> get_profile(@NotBlank @RequestHeader("Authorization") String id){
         Optional<User> optionalUser = userRepository.findById(Integer.parseInt(id));
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            return ResponseEntity.status(HttpStatus.OK).body(user);
        }
        return ResponseEntity.status(HttpStatus.OK).body(null);
    }
    @PostMapping("/set_profile")
    public ResponseEntity<User> set_profile( @NotBlank @RequestHeader("Authorization") String id, @NotNull @RequestParam(value = "nickname") String nickname,@NotNull @RequestParam(value ="uploadPath") String path, @NotNull @RequestParam(value ="avatar") MultipartFile file) throws IOException, URISyntaxException {
        Optional<User> opUser = userRepository.findById(Integer.parseInt(id));
        if(opUser.isPresent()){
            User currentUser=opUser.get();
            currentUser.setNickname(nickname);
            String filename= uploadService.uploadImage(file);
            currentUser.setAvatarPath(path+filename);
            userRepository.save(currentUser);
            return ResponseEntity.status(HttpStatus.OK).body(currentUser);
        }
         return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
    }
}
